var N = null;var searchIndex = {};
searchIndex["primes"]={"doc":"A basic library for finding primes, providing a basic Iterator over all primes. It is not as fast as `slow_primes`, but it is meant to be easy to use!","items":[[3,"PrimeSet","primes","A prime generator, using the Sieve of Eratosthenes.",N,N],[3,"PrimeSetIter","","An iterator over generated primes. Created by `PrimeSet::iter` or `PrimeSet::generator`",N,N],[5,"factors","","Find all prime factors of a number Does not use a `PrimeSet`, but simply counts upwards",N,[[["u64"]],["vec",["u64"]]]],[5,"factors_uniq","","Find all unique prime factors of a number",N,[[["u64"]],["vec",["u64"]]]],[5,"is_prime","","Test whether a number is prime. Checks every odd number up to `sqrt(n)`.",N,[[["u64"]],["bool"]]],[11,"default","","",0,[[],["primeset"]]],[11,"new","","A new prime generator, primed with 2 and 3",0,[[],["primeset"]]],[11,"expand","","Finds one more prime, and adds it to the list",0,[[["self"]]]],[11,"len","","Number of primes found so far",0,[[["self"]],["usize"]]],[11,"is_empty","","",0,[[["self"]],["bool"]]],[11,"list","","Return all primes found so far as a slice",0,N],[11,"generator","","Iterator over all primes not yet found",0,[[["self"]],["primesetiter"]]],[11,"iter","","Iterator over all primes, starting with 2. If you don't care about the \"state\" of the `PrimeSet`, this is what you want!",0,[[["self"]],["primesetiter"]]],[11,"iter_vec","","Iterator over just the primes found so far",0,[[["self"]],["iter",["u64"]]]],[11,"find","","Find the next largest prime from a number",0,N],[11,"is_prime","","Check if a number is prime",0,[[["self"],["u64"]],["bool"]]],[11,"find_vec","","Find the next largest prime from a number, if it is within the already-found list",0,[[["self"],["u64"]],["option"]]],[11,"get","","Get the nth prime, even if we haven't yet found it",0,[[["self"],["usize"]],["u64"]]],[11,"prime_factors","","Get the prime factors of a number, starting from 2, including repeats",0,[[["self"],["u64"]],["vec",["u64"]]]],[11,"index","","",0,[[["self"],["usize"]],["u64"]]],[11,"next","","",1,[[["self"]],["option",["u64"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"PrimeSet"],[3,"PrimeSetIter"]]};
initSearch(searchIndex);
